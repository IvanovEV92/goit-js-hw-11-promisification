{"version":3,"sources":["webpack:///./promise-issue-1.js","webpack:///./promise-issue-2.js","webpack:///./promise-issue-3.js"],"names":["require","resolve","delay","ms","Promise","setTimeout","logger","time","console","log","then","users","name","active","updatedUsers","table","toggleUserState","allUsers","userName","map","user","makeTransaction","transaction","min","max","Math","floor","random","reject","obj","id","logSuccess","logError","warn","amount","catch"],"mappings":"uJAAoBA,EAAQ,QAApBC,Q,IAEFC,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAH,GACjBI,YAAW,kBAAMJ,EAAQE,KAAKA,OAI5BG,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ,G,kCCbXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBP,EAAS,SAAAQ,GAAY,OAAIN,QAAQO,MAAMD,IAEvCE,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAId,SAAQ,SAAAH,GACjBA,EACEgB,EAASE,KAAI,SAAAC,GAAI,OACfA,EAAKR,OAASM,EAAd,iBAA8BE,EAA9B,CAAoCP,QAASO,EAAKP,SAAWO,UASrEJ,EAAgBL,EAAO,SAASD,KAAKJ,GACrCU,EAAgBL,EAAO,OAAOD,KAAKJ,GCvBnC,IAIMe,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCtB,GAL2BqB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAInB,SAAQ,SAACH,EAAS2B,GAC3BvB,YAAW,WAGT,GAFmBoB,KAAKE,SAAW,GAEnB,CACd,IAAME,EAAM,CACVC,GAAIR,EAAYQ,GAChBvB,KAAML,GAERD,EAAQ4B,QAERD,EAAON,EAAYQ,MAEpB5B,OAGD6B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIvB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAGFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAE/DX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,K","file":"main.6366aede5cff7a2ea011.js","sourcesContent":["const { resolve } = require('core-js/fn/promise');\n\nconst delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(ms), ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    resolve(\n      allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n      ),\n    );\n  });\n};\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        const obj = {\n          id: transaction.id,\n          time: delay,\n        };\n        resolve(obj);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}